{"version":3,"sources":["components/Demos/style.jsx","components/Demos/CytoscapeDemo.jsx","components/Demos/ManipulationDemo.jsx","components/Demos/ConsumerDemo.jsx","components/Demos/index.js","components/Router.jsx","components/Header.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["overCyto","SourceLink","styled","a","_templateObject","SourceButton","_ref","href","react_default","createElement","target","defaultProps","AddButton","button","_templateObject2","MatOuter","div","_templateObject3","props","half","MatInner","_templateObject4","Mat","_ref2","children","CytoscapeDemo","style_Mat","dist_default","cyInitJSON","defaultJSON","style","backgroundColor","height","width","style_SourceButton","React","Component","path","title","Manipulation","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNode","_this$state","state","cyJSON","lastNode","lastPosition","nextNode","uuidv4","newNode","data","id","position","x","y","newEdge","source","setState","objectSpread","elements","toConsumableArray","concat","dist","left","top","role","onClick","GraphStateWindow","code","ConsumerDemo_templateObject","ConsumerDemo","Consumer","cy","JSON","stringify","json","Demos","ManipulationDemo","DemoWrapper","Router_templateObject","AppRouter","BrowserRouter","react","Switch","map","Demo","Route","key","component","HeaderWrapper","Header_templateObject","HeaderTitle","h1","Header_templateObject2","HeaderList","ul","Header_templateObject3","HeaderItem","li","Header_templateObject4","HeaderLink","Link","_templateObject5","Header","to","AppWrapper","App_templateObject","App","Router","components_Header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.160e721c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst overCyto = () => ` \ndisplay: inline-block;\npadding: 20px;\nbackground-color: rgba(255,255,255,0.75);\ntext-decoration: none;\nz-index: 1000;\nposition: absolute;\n`;\n\nconst SourceLink = styled.a`\n${overCyto}\nright: 0;\ntop: 0;\n`;\n\nexport const SourceButton = ({ href }) => <SourceLink href={href} target=\"_blank\">Source (Github)</SourceLink>;\n\nSourceButton.defaultProps = {\n  href: '',\n};\n\nSourceButton.propTypes = {\n  href: PropTypes.string,\n};\n\nexport const AddButton = styled.button`\nborder: none;\n${overCyto}\nleft: 0;\ntop: 0;\n`;\n\nconst MatOuter = styled.div`\npadding: 30px;\nwidth: 100%;\nheight: ${props => (props.half ? '50%' : '100%')};\noverflow: hidden;\n`;\n\nconst MatInner = styled.div`\nposition: relative;\nwidth: 100%;\nheight: 100%;\noverflow: hidden;\n`;\n\nexport const Mat = ({ children, half }) => (\n  <MatOuter half={half}><MatInner half={half}>{children}</MatInner></MatOuter>\n);\n\nMat.defaultProps = {\n  children: null,\n  half: false,\n};\n\nMat.propTypes = {\n  children: PropTypes.node,\n  half: PropTypes.bool,\n};\n","import React from 'react';\nimport Cytoscape from 'react-cytoscape-tools';\nimport { Mat, SourceButton } from './style';\nimport defaultJSON from './default';\n\nclass CytoscapeDemo extends React.Component {\n  render () {\n    return (\n      <Mat>\n        <Cytoscape\n          cyInitJSON={defaultJSON}\n          style={{ 'backgroundColor': '#111', height: '100%', width: '100%' }}\n        >\n          <SourceButton\n            href=\"https://github.com/wgoldie/react-cytoscape-tools-demo/blob/master/src/components/Demos/CytoscapeDemo.jsx\"\n          />\n        </Cytoscape> \n      </Mat>\n    );\n  }\n}\n\nCytoscapeDemo.path = 'cytoscape';\nCytoscapeDemo.title = '<Cytoscape>';\n\nexport default CytoscapeDemo;\n","import React from 'react';\nimport { CytoscapeView, CytoscapeProvider } from 'react-cytoscape-tools';\nimport { Mat, SourceButton, AddButton } from './style';\nimport defaultJSON from './default';\nimport uuidv4 from 'uuid/v4';\n\nclass Manipulation extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { cyJSON: defaultJSON, lastNode: 'd', lastPosition: 0 };\n  }\n\n  addNode = () => {\n    const { cyJSON, lastNode, lastPosition } = this.state;\n    const nextNode = uuidv4();\n    const newNode = {\n      data: { id: nextNode },\n      position: {\n        x: 500 + (0.5 - (lastPosition % 2)) * 100,\n        y: 200 + lastPosition * 40\n      }\n    };\n    const newEdge = { data: { source: lastNode, target: nextNode } };\n\n    this.setState({\n      lastNode: nextNode,\n      cyJSON: {\n        ...cyJSON,\n        elements: [\n          ...cyJSON.elements,\n          newNode,\n          newEdge\n        ],\n      },\n      lastPosition: lastPosition + 1,\n    });\n  }\n\n  render () {\n    return (\n      <CytoscapeProvider>\n        <Mat>\n          <CytoscapeView\n            cyInitJSON={defaultJSON}\n            cyJSON={this.state.cyJSON}\n            style={{\n              'backgroundColor': '#111',\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              height: '100%',\n              width: '100%'\n            }}\n          >\n            <AddButton\n              role=\"button\"\n              onClick={this.addNode}\n            >\n              Add node\n            </AddButton>\n            <SourceButton\n              href=\"https://github.com/wgoldie/react-cytoscape-tools-demo/blob/master/src/components/Demos/ManipulationDemo.jsx\"\n            />\n          </CytoscapeView>\n        </Mat>\n      </CytoscapeProvider>\n    );\n  }\n}\n\nManipulation.path = 'manipulation';\nManipulation.title = 'Manipulation with <CytoscapeView>';\n\nexport default Manipulation;\n","import React from 'react';\nimport {\n  CytoscapeGate,\n  CytoscapeContext,\n  CytoscapeView,\n  CytoscapeProvider\n} from 'react-cytoscape-tools';\n\nimport styled from 'styled-components';\nimport { Mat, AddButton, SourceButton } from './style';\nimport defaultJSON from './default';\nimport uuidv4 from 'uuid/v4';\n\nconst GraphStateWindow = styled.code`\nfont-family: Consolas, Courier, monospace;\ndisplay: block;\ncolor: #fff;\nbackground: rgba(1,1,1,0.25);\nwhite-space: pre-line;\nwhite-space: pre-wrap;\noverflow: scroll;\nheight: 100%;\nwidth: 100%;\n`;\n\nclass ConsumerDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { cyJSON: defaultJSON, lastNode: 'd', lastPosition: 0 };\n  }\n\n  addNode = () => {\n    const { cyJSON, lastNode, lastPosition } = this.state;\n    const nextNode = uuidv4();\n    const newNode = {\n      data: { id: nextNode },\n      position: {\n        x: 500 + (0.5 - (lastPosition % 2)) * 100,\n        y: 200 + lastPosition * 40\n      }\n    };\n    const newEdge = { data: { source: lastNode, target: nextNode } };\n\n    this.setState({\n      lastNode: nextNode,\n      cyJSON: {\n        ...cyJSON,\n        elements: [\n          ...cyJSON.elements,\n          newNode,\n          newEdge\n        ],\n      },\n      lastPosition: lastPosition + 1,\n    });\n  }\n\n  render () {\n    return (\n      <CytoscapeProvider>\n        <Mat half>\n          <AddButton\n            role=\"button\"\n            onClick={this.addNode}\n          >\n            Add node\n          </AddButton>\n          <CytoscapeView\n            cyInitJSON={defaultJSON}\n            cyJSON={this.state.cyJSON}\n            style={{ 'backgroundColor': '#111', height: '100%', width: '100%' }}\n          >\n            <SourceButton\n              href=\"https://github.com/wgoldie/react-cytoscape-tools-demo/blob/master/src/components/Demos/ConsumerDemo.jsx\"\n            />\n          </CytoscapeView>\n        </Mat>\n        <Mat half>\n          <GraphStateWindow>\n            <CytoscapeGate>\n              <CytoscapeContext.Consumer>\n                {\n                  ({ cy }) => JSON.stringify(cy.json(), null, 2)\n                }\n              </CytoscapeContext.Consumer>\n            </CytoscapeGate>\n          </GraphStateWindow>\n        </Mat>\n      </CytoscapeProvider>\n    );\n  }\n}\n\nConsumerDemo.path = 'consumer';\nConsumerDemo.title = 'Consuming Cytoscape state with <CytoscapeContext.Consumer>';\n\nexport default ConsumerDemo;\n","import CytoscapeDemo from './CytoscapeDemo';\nimport ManipulationDemo from './ManipulationDemo';\nimport ConsumerDemo from './ConsumerDemo';\n\nexport default [\n  CytoscapeDemo,\n  ManipulationDemo,\n  ConsumerDemo,\n];\n","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Demos from './Demos';\n\nconst DemoWrapper = styled.div`\nflex: 5;\nbackground-color: #222;\noverflow: hidden;\n`;\n\nconst AppRouter = ({ children }) => (\n  <Router>\n    <Fragment>\n      { children }\n      <DemoWrapper>\n        <Switch>\n          {\n            Demos.map(Demo => (\n              <Route\n                key={Demo.path}\n                path={`/${Demo.path}`}\n                component={Demo}\n              />)\n            )\n          }\n        </Switch>\n      </DemoWrapper>\n    </Fragment>\n  </Router>\n);\n\nexport default AppRouter;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Demos from './Demos';\n\nconst HeaderWrapper = styled.div`\nflex: 0.8;\n`;\nconst HeaderTitle = styled.h1`\nfont-size: 200%;\ndisplay: block;\npadding: 20px;\n`;\nconst HeaderList = styled.ul``;\nconst HeaderItem = styled.li`\ndisplay: inline-block;\nborder: 1px solid #000;\npadding: 5px;\nmargin: 5px;\n`;\n\nconst HeaderLink = styled(Link)`\ntext-decoration: none;\n`;\n\nconst Header = () => (\n  <HeaderWrapper>\n    <HeaderTitle>react-cytoscape-tools demos</HeaderTitle>\n    <HeaderList>\n      { Demos.map((Demo) => (\n        <HeaderItem key={Demo.path}>\n          <HeaderLink to={Demo.path}>\n            {Demo.title}\n          </HeaderLink>\n        </HeaderItem>))\n      }\n    </HeaderList>\n  </HeaderWrapper>);\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Router from './Router';\nimport Header from './Header';\n\nconst AppWrapper = styled.div`\nheight: 100%;\nwidth: 100%;\noverflow: hidden;\ndisplay: flex;\nflex-direction: column;\n`;\n\nconst App = () => (\n  <AppWrapper>\n    <Router>\n      <Header />\n    </Router>\n  </AppWrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(React.createElement(App), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}